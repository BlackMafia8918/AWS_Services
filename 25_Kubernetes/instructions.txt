1) Create EC2 instance with 4GB RAM and 30 GB SSD
Name : ec2_upgraded_server
Key : ec2_upgraded_server_key.pem
Region : ap-southeast-1
Security group allowing ports 22 (SSH), 3000, 80, 443, and 6443 (for Kubernetes API server)

2) Install Docker & Kubernetes on EC2

=> Update system & install dependencies

sudo apt update && sudo apt upgrade -y
sudo apt install -y curl wget apt-transport-https ca-certificates gnupg

=> Install Docker

sudo apt install -y docker.io
sudo systemctl enable docker
sudo systemctl start docker
sudo usermod -aG docker ubuntu  # Add user to docker group


docker --version

=> Install Kubernetes (kubectl, kubeadm, kubelet)

sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo tee /etc/apt/trusted.gpg.d/kubernetes.asc
echo "deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl  # Prevent auto-upgrades


kubectl version --client
kubeadm version


=>  Initialize Kubernetes Cluster

sudo swapoff -a
sudo sed -i '/swap/d' /etc/fstab

=> Start Kubernetes Cluster

sudo kubeadm init --pod-network-cidr=192.168.0.0/16

=> Set Up Kubeconfig

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


Verify Cluster Status
kubectl get nodes

=> Install Network Plugin (Flannel)

kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml

Verify Pods:
kubectl get pods --all-namespaces


=> Deploy Node.js App on Kubernetes

Create a Node.js App
Install Node.js

curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install -y nodejs

Create Project Folder

mkdir k8s-node-app && cd k8s-node-app
npm init -y
npm install express

Create server.js

const express = require("express");
const app = express();
const port = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.send("Hello from Kubernetes on AWS!");
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

